Lua Syntax
-- Two dashes start a one-line comment

-- [[
Adding two ['s and ]'s makes it a
multi-line comment.
-- ]]

--------------------------------------------
-- 1. Variables and flow control.
--------------------------------------------

num = 42 -- All numbers are doubles.
-- Don't freak out, 64-bit doubles have 52 bits for
-- storing exact int values; machine precision is
-- not a problem for ints that need < 52 bits.

s = 'walternate'  -- Immutable strings like Python
t = "double-quotes are also fine"
u = [[ Double brackets
start and end
multi-line strings, similar to back-tick. ]]
t = nil -- Undefines t; Lua has garbage collection.

-- Blocks are denoted with keywords like do / end:
while num < 50 do
num = num + 1  -- No ++ or += type operators.
end

-- If clauses:
if num > 40 then
print('over 40')
elseif s ~= 'walternate' then -- ~= is not equals.
-- Equality check is == like Python; ok for strs.
io.write('not over 40\n') -- Defaults to stdout.
else
-- Variables are global by default.
thisIsGlobal = 5  -- Camel case is common.

-- How to make a variable local:
local line = io.read() -- Reads next stdin line.

-- String concatenation uses the .. operator:
print('Winter is coming, ' .. line)
end

-- Undefined variables return nil.
-- This is not an error:
foo = anUnknownVariable -- Now foo = nil.

aBoolVallue = false

-- Only nil and false are falsy; 0 and '' are true!
if not aBoolValue then print ('twas false') end

-- 'or' and 'and' are short-circuited.
-- This is similar to the a ? true : false (ternary operator) in C/js:
ans = aBoolValue and 'yes' or 'no' --> 'no'

karlSum = 0
for i = 1, 100 do -- The range includes both ends.
karlSum = karlSum + 1
end

-- Use "100, 1, -1" as the range to count down:
fredSum = 0
for j = 100, 1, -1 do
fredSum = fredSum + j
end

-- In general, the range is begin, end[, step] where [, step] is optional.

-- Another loop construct:
num = 100
repeat
print('the way of the future')
num = num - 1
until num == 0

--------------------------------------------
-- 2. Functions.
--------------------------------------------

function fib(n)
if n < 2 then
return 1
end
return fib(n - 2) + fib(n - 1)
end

-- Closures and anonymous functions are ok:
function adder(x)
-- The returned function is created when adder is
-- called, and remembers the value of x:
return function(y)
return x + y
end
end

a1 = adder(9)
a2 = adder(36)
print(a1(16)) --> 25
print(a2(64)) --> 100

-- Returns, func calls, and assignments all work
-- with lists that may be mismatched in length.
-- Unmatched receivers are nil;
-- Unmatched senders are discarded.

x, y, z = 1, 2, 3, 4
-- Now x = 1, y = 2, z = 3, and 4 is thrown away.

function bar(a, b, c)
print(a, b, c)
return 4, 8, 15, 16, 23, 42
end

x, y = bar('zaphod') --> prints "zaphod nil nil"
-- Now x = 4, y = 8, values 15..42 are discarded

-- Functions are first-class, may be local/global
-- These are the same:
function f(x)
return x * x
end
f = function(x)
return x*x
end

-- And so are these:
local function g(x)
return math.sin(x)
end

local g; g = function(x)
return math.sin(x)
end
-- the 'local g' decl makes g-self-references ok.

-- Trig funcs work in radians, by the way.

-Calls with one string param don't need parens:
print 'hello' -- works fine.




Source: https://tylerneylon.com/a/learn-lua/




-- [[ Why Lua
Lua is a highly versatile, embeddable language that can be integrated into a wide variety of environments and applications. Here are some common places where Lua can be embedded:

Game Engines: Lua is widely used in game development for scripting game logic. Popular game engines like Unity (via plugins), Corona SDK, CryEngine, and others support Lua.

Web Servers: Lua can be embedded in web servers to enhance functionality. Nginx, for example, uses Lua scripts to extend its capabilities through the OpenResty framework.

Embedded Systems: Due to its lightweight nature, Lua is suitable for embedded systems and IoT devices. It can run on constrained hardware with limited resources.

Applications: Many software applications embed Lua for custom scripting capabilities. For instance, Adobe Lightroom uses Lua for plugin development, and World of Warcraft uses Lua for scripting addons.

Scientific Computing: Lua is used in scientific computing and data analysis tools, such as the Torch machine learning library.

Networking Devices: Networking devices, including routers, often use Lua for configuration and management tasks.

Custom Software Solutions: Developers can embed Lua in custom applications to provide a scripting layer for users, enabling easier customization and automation.

Database Systems: Some database systems support Lua scripting for stored procedures and triggers. Tarantool, a NoSQL database, extensively uses Lua for these purposes.

The primary advantage of embedding Lua is its simplicity and ease of integration, making it a popular choice for adding scripting capabilities to a wide range of software and hardware environments.

-- ]]